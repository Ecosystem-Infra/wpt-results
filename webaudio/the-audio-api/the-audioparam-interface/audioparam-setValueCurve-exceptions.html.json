{"status":"OK","subtests":[{"name":"# AUDIT TASK RUNNER STARTED.","status":"PASS"},{"name":"> [setValueCurve] ","status":"PASS"},{"name":"  setValueCurveAtTime(curve, 0.0125, 0.0125) did not throw an exception.","status":"PASS"},{"name":"X setValueAtTime(1, 0.018750000000000003) threw \"SyntaxError\" instead of NotSupportedError.","status":"FAIL"},{"name":"X linearRampToValueAtTime(1, 0.018750000000000003) threw \"SyntaxError\" instead of NotSupportedError.","status":"FAIL"},{"name":"X exponentialRampToValueAtTime(1, 0.018750000000000003) threw \"SyntaxError\" instead of NotSupportedError.","status":"FAIL"},{"name":"X setTargetAtTime(1, 0.018750000000000003, 1) threw \"SyntaxError\" instead of NotSupportedError.","status":"FAIL"},{"name":"  setValueAtTime(1, 0.026250000000000002) did not throw an exception.","status":"PASS"},{"name":"< [setValueCurve] 4 out of 6 assertions were failed.","status":"FAIL"},{"name":"> [automations] ","status":"PASS"},{"name":"  linearRampToValueAtTime(1, 0.0125) did not throw an exception.","status":"PASS"},{"name":"  exponentialRampToValueAtTime(1, 0.025) did not throw an exception.","status":"PASS"},{"name":"  setTargetAtTime(1, 0.037500000000000006, 0.1) did not throw an exception.","status":"PASS"},{"name":"  setValueCurveAtTime(curve, 0.05, 0.1) did not throw an exception.","status":"PASS"},{"name":"X setValueCurveAtTime(curve, 0.00625, 0.01) threw \"SyntaxError\" instead of NotSupportedError.","status":"FAIL"},{"name":"X setValueCurveAtTime(curve, 0.018750000000000003, 0.01) threw \"SyntaxError\" instead of NotSupportedError.","status":"FAIL"},{"name":"X setValueCurveAtTime(curve, 0.03125, 0.01) threw \"SyntaxError\" instead of NotSupportedError.","status":"FAIL"},{"name":"X setValueCurveAtTime(curve, 0.043750000000000004, 0.01) threw \"SyntaxError\" instead of NotSupportedError.","status":"FAIL"},{"name":"X setValueCurveAtTime([NaN, NaN], 0.043750000000000004, 0.01) threw \"TypeError\" instead of EcmaScript error TypeError.","status":"FAIL"},{"name":"X setValueCurveAtTime([1, Infinity], 0.043750000000000004, 0.01) threw \"TypeError\" instead of EcmaScript error TypeError.","status":"FAIL"},{"name":"  delayTime.setValueCurveAtTime([1, 5], 0.043750000000000004, 0.01) did not throw an exception.","status":"PASS"},{"name":"X delayTime.setValueCurveAtTime([1, 5, Infinity], 0.043750000000000004, 0.01) threw \"TypeError\" instead of EcmaScript error TypeError.","status":"FAIL"},{"name":"X setValueCurveAtTime(curve, 0.031415926535897934, 0.01) threw \"SyntaxError\" instead of NotSupportedError.","status":"FAIL"},{"name":"< [automations] 8 out of 13 assertions were failed.","status":"FAIL"},{"name":"> [catch-exception] ","status":"PASS"},{"name":"  Handled setValueCurve exception so output contains only the constant 1.","status":"PASS"},{"name":"< [catch-exception] All assertions passed. (total 1 assertions)","status":"PASS"},{"name":"> [start-end] ","status":"PASS"},{"name":"  setValueAtTime(1, 0) did not throw an exception.","status":"PASS"},{"name":"  linearRampToValueAtTime(0, 0.0025) did not throw an exception.","status":"PASS"},{"name":"  setValueCurveAtTime(..., 0.0025, 0.0025) did not throw an exception.","status":"PASS"},{"name":"  exponentialRampToValueAtTime(1, 0.0075) did not throw an exception.","status":"PASS"},{"name":"  setValueCurveAtTime(..., 0.0075, 0.0025) did not throw an exception.","status":"PASS"},{"name":"  setValueCurveAtTime(..., 0.01, 0.0025) did not throw an exception.","status":"PASS"},{"name":"  setValueAtTime(0, 0.0125) did not throw an exception.","status":"PASS"},{"name":"  setValueCurveAtTime(..., 0.0125, 0.0025) did not throw an exception.","status":"PASS"},{"name":"  setTargetAtTime(1, 0.015000000000000001, 1) did not throw an exception.","status":"PASS"},{"name":"< [start-end] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"> [curve lengths] ","status":"PASS"},{"name":"X setValueCurveAtTime([], 0, 0.01) threw \"SyntaxError\" instead of InvalidStateError.","status":"FAIL"},{"name":"X setValueCurveAtTime([1], 0, 0.01) did not throw an exception.","status":"FAIL"},{"name":"  setValueCurveAtTime([1,2], 0, 0.01) did not throw an exception.","status":"PASS"},{"name":"< [curve lengths] 2 out of 3 assertions were failed.","status":"FAIL"},{"name":"# AUDIT TASK RUNNER FINISHED: 3 out of 5 tasks were failed.","status":"FAIL"}]}