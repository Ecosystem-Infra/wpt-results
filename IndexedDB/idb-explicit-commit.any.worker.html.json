{"status":"TIMEOUT","subtests":[{"name":"Explicitly committed data can be read back out.","status":"FAIL"},{"name":"commit() on a version change transaction does not cause errors.","status":"FAIL"},{"name":"A committed transaction becomes inactive immediately.","status":"TIMEOUT"},{"name":"A committed transaction is inactive in future request callbacks.","status":"NOTRUN"},{"name":"Puts issued after commit are not fulfilled.","status":"NOTRUN"},{"name":"Calling commit on an aborted transaction throws.","status":"NOTRUN"},{"name":"Calling commit on a committed transaction throws.","status":"NOTRUN"},{"name":"Calling abort on a committed transaction throws and does not prevent persisting the data.","status":"NOTRUN"},{"name":"Calling txn.commit() when txn is inactive should throw.","status":"NOTRUN"},{"name":"Transactions with same scope should stay in program order, even if one calls commit.","status":"NOTRUN"},{"name":"Transactions that explicitly commit and have errors should abort.","status":"NOTRUN"}]}