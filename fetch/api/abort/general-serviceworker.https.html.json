{"status":"OK","subtests":[{"name":"ServiceWorkerGlobalScope: Aborting rejects with AbortError","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Aborting rejects with AbortError - no-cors","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Request objects have a signal property","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Signal on request object","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Signal on request object created from request object","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Signal on request object created from request object, with signal on second request","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Signal on request object created from request object, with signal on second request overriding another","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Signal retained after unrelated properties are overridden by fetch","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Signal removed by setting to null","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Already aborted signal rejects immediately","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Request is still 'used' if signal is aborted before fetching","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: response.arrayBuffer() rejects if already aborted","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: response.blob() rejects if already aborted","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: response.formData() rejects if already aborted","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: response.json() rejects if already aborted","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: response.text() rejects if already aborted","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Already aborted signal does not make request","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Already aborted signal can be used for many fetches","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Signal can be used to abort other fetches, even if another fetch succeeded before aborting","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Underlying connection is closed when aborting after receiving response","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Underlying connection is closed when aborting after receiving response - no-cors","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Fetch aborted & connection closed when aborted after calling response.arrayBuffer()","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Fetch aborted & connection closed when aborted after calling response.blob()","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Fetch aborted & connection closed when aborted after calling response.formData()","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Fetch aborted & connection closed when aborted after calling response.json()","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Fetch aborted & connection closed when aborted after calling response.text()","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Stream errors once aborted. Underlying connection closed.","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Stream errors once aborted, after reading. Underlying connection closed.","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Stream will not error if body is empty. It's closed with an empty queue before it errors.","status":"FAIL"},{"name":"ServiceWorkerGlobalScope: Readable stream synchronously cancels with AbortError if aborted before reading","status":"FAIL"}]}