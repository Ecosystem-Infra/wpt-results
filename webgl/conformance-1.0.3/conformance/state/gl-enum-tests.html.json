{"status":"OK","subtests":[{"name":"Overall test","status":"PASS"},{"name":"WebGL test #0: context exists","status":"PASS"},{"name":"WebGL test #1: getError was expected value: NO_ERROR : ","status":"PASS"},{"name":"WebGL test #2: getError was expected value: INVALID_ENUM : gl.bindTexture(desktopGL['TEXTURE_3D'], tex) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #3: getError was expected value: INVALID_ENUM : gl.blendEquation(desktopGL['MIN']) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #4: getError was expected value: INVALID_ENUM : gl.blendEquation(desktopGL['MAX']) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #5: getError was expected value: INVALID_ENUM : gl.blendEquationSeparate(desktopGL['MIN'], gl.FUNC_ADD) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #6: getError was expected value: INVALID_ENUM : gl.blendEquationSeparate(desktopGL['MAX'], gl.FUNC_ADD) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #7: getError was expected value: INVALID_ENUM : gl.blendEquationSeparate(gl.FUNC_ADD, desktopGL['MIN']) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #8: getError was expected value: INVALID_ENUM : gl.blendEquationSeparate(gl.FUNC_ADD, desktopGL['MAX']) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #9: getError was expected value: INVALID_ENUM : gl.bufferData(gl.ARRAY_BUFFER, 3, desktopGL['STATIC_READ']) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #10: getError was expected value: INVALID_ENUM : gl.disable(desktopGL['CLIP_PLANE0']) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #11: getError was expected value: INVALID_ENUM : gl.disable(desktopGL['POINT_SPRITE']) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #12: getError was expected value: INVALID_ENUM : gl.getBufferParameter(gl.ARRAY_BUFFER, desktopGL['PIXEL_PACK_BUFFER']) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #13: getError was expected value: INVALID_ENUM : gl.hint(desktopGL['PERSPECTIVE_CORRECTION_HINT'], gl.FASTEST) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #14: getError was expected value: INVALID_ENUM : gl.isEnabled(desktopGL['CLIP_PLANE0']) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #15: getError was expected value: INVALID_ENUM : gl.isEnabled(desktopGL['POINT_SPRITE']) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #16: getError was expected value: INVALID_ENUM : gl.pixelStorei(desktopGL['PACK_SWAP_BYTES'], 1) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #17: getError was expected value: NO_ERROR : ","status":"PASS"},{"name":"WebGL test #18: getError was expected value: INVALID_ENUM : gl.getTexParameter(gl.TEXTURE_2D, desktopGL['GENERATE_MIPMAP']) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #19: getError was expected value: INVALID_ENUM : gl.texParameteri(desktopGL['TEXTURE_3D'], gl.TEXTURE_MAG_FILTER, gl.NEAREST) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #20: getError was expected value: INVALID_ENUM : gl.texParameteri(gl.TEXTURE_2D, desktopGL['GENERATE_MIPMAP'], 1) should return INVALID_ENUM.","status":"PASS"},{"name":"WebGL test #21: successfullyParsed is true","status":"PASS"}]}