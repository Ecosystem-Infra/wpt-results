{"status":"TIMEOUT","subtests":[{"name":"Test that promise is rejected with TypeError if NDEFMessageSource is invalid.","status":"TIMEOUT"},{"name":"Test that promise is rejected with SyntaxError if NDEFMessageSource contains invalid records.","status":"NOTRUN"},{"name":"NDEFWriter.write should fail if user permission is not granted.","status":"NOTRUN"},{"name":"NDEFWriter.write should fail if no implementation for NFC Mojo interface is available.","status":"NOTRUN"},{"name":"NDEFWriter.write should fail if abort write request before write happends.","status":"NOTRUN"},{"name":"NDEFWriter.write should fail if signal's aborted flag is set.","status":"NOTRUN"},{"name":"NDEFWriter.write should fail if signal is not an AbortSignal.","status":"NOTRUN"},{"name":"Synchronously signaled abort.","status":"NOTRUN"},{"name":"NDEFWriter.write should fail when NFC HW is disabled.","status":"NOTRUN"},{"name":"NDEFWriter.write should fail when NFC HW is not supported.","status":"NOTRUN"},{"name":"Test that WebNFC API is not accessible from iframe context.","status":"NOTRUN"},{"name":"NDEFWriter.write should succeed when NFC HW is enabled","status":"NOTRUN"},{"name":"NDEFWriter.write NDEFMessage containing text, mime, unknown, url, absolute-url and external records with default NDEFWriteOptions.","status":"NOTRUN"},{"name":"NDEFWriter.write NDEFMessage containing embedded records.","status":"NOTRUN"},{"name":"NDEFWriter.write NDEFMessage containing smart-poster record.","status":"NOTRUN"},{"name":"Test that NDEFWriter.write succeeds when message is DOMString.","status":"NOTRUN"},{"name":"Test that NDEFWriter.write succeeds when message is ArrayBuffer.","status":"NOTRUN"},{"name":"Test that NDEFWriter.write succeeds when message is ArrayBufferView.","status":"NOTRUN"},{"name":"NDEFWriter.write with 'empty' record should succeed.","status":"NOTRUN"},{"name":"Check that default NDEFWriteOptions values are correctly set.","status":"NOTRUN"},{"name":"Check that provided NDEFWriteOptions values are correctly converted.","status":"NOTRUN"},{"name":"NDEFWriter.write should read data when ignoreRead is false.","status":"NOTRUN"},{"name":"NDEFWriter.write should ignore reading data when ignoreRead is true.","status":"NOTRUN"},{"name":"NDEFWriter.write should replace all previously configured write operations.","status":"NOTRUN"},{"name":"Test that mediaType should be set to 'application/octet-stream' if NDEFRecordInit.record's recordType is 'mime' and NDEFRecordInit.record's mediaType is undefined.","status":"NOTRUN"},{"name":"NDEFWriter.write should fail when the NFC device coming up does not expose NDEF technology.","status":"NOTRUN"},{"name":"NDEFWriter.write should succeed to write data to an unformatted NFC device when the NDEFWriteOptions.overwrite is false.","status":"NOTRUN"},{"name":"NDEFWriter.write should succeed to overwrite the existing data when the NDEFWriteOptions.overwrite is true.","status":"NOTRUN"},{"name":"NDEFWriter.write should fail when there are NDEF records on the NFC device and NDEFWriteOptions.overwrite is false.","status":"NOTRUN"},{"name":"NDEFWriter.write should fail with NetworkError when NFC data transfer fails.","status":"NOTRUN"}]}