{"status":"OK","subtests":[{"name":"Test that promise is rejected with TypeError if NDEFMessageSource is invalid.","status":"FAIL"},{"name":"Test that promise is rejected with SyntaxError if NDEFMessageSource contains invalid records.","status":"FAIL"},{"name":"NDEFWriter.push should fail if abort push request before push happends.","status":"FAIL"},{"name":"NDEFWriter.push should fail if signal's aborted flag is set.","status":"FAIL"},{"name":"NDEFWriter.push should fail if signal is not an AbortSignal.","status":"FAIL"},{"name":"Synchronously signaled abort.","status":"FAIL"},{"name":"NDEFWriter.push should fail when NFC HW is disabled.","status":"FAIL"},{"name":"NDEFWriter.push should fail when NFC HW is not supported.","status":"FAIL"},{"name":"NDEFWriter.push should fail with TypeError when invalid timeout is provided.","status":"FAIL"},{"name":"NDEFWriter.push should fail with TypeError when invalid negative timeout value is provided.","status":"FAIL"},{"name":"NDEFWriter.push should fail with TimeoutError when timer expires.","status":"FAIL"},{"name":"Reject promise with NotSupportedError if NFC message size exceeds 32KB.","status":"FAIL"},{"name":"Reject promise with SyntaxError if WebNFC Id cannot be created from provided URL.","status":"FAIL"},{"name":"Reject promise with exceptions thrown from serializing the 'json' record data.","status":"FAIL"},{"name":"NDEFWriter.push should fail with TypeError when invalid target value is provided.","status":"FAIL"},{"name":"Test that WebNFC API is not accessible from iframe context.","status":"FAIL"},{"name":"NDEFWriter.push should succeed when NFC HW is enabled","status":"FAIL"},{"name":"NDEFWriter.push NDEFMessage containing text, json, opaque, url and external records with default NDEFPushOptions.","status":"FAIL"},{"name":"Test that NDEFWriter.push succeeds when message is DOMString.","status":"FAIL"},{"name":"Test that NDEFWriter.push succeeds when message is ArrayBuffer.","status":"FAIL"},{"name":"NDEFWriter.push with 'empty' record should succeed.","status":"FAIL"},{"name":"Check that default NDEFPushOptions values are correctly set.","status":"FAIL"},{"name":"Check that provided NDEFPushOptions values are correctly converted.","status":"FAIL"},{"name":"NDEFWriter.push should read data when ignoreRead is false.","status":"FAIL"},{"name":"NDEFWriter.push should ignore reading data when ignoreRead is true.","status":"FAIL"},{"name":"NDEFWriter.push should replace all previously configured push operations.","status":"FAIL"},{"name":"Test that recordType should be set to 'text' if NDEFRecordInit.record's recordType is undefined and NDEFRecordInit.record's data is DOMString.","status":"FAIL"},{"name":"Test that recordType should be set to 'opaque' if NDEFRecordInit.record's recordType is undefined and NDEFRecordInit.record's data is ArrayBuffer.","status":"FAIL"},{"name":"Test that recordType should be set to 'json' if NDEFRecordInit.record's recordType is undefined and NDEFRecordInit.record's data is not DOMString or ArrayBuffer.","status":"FAIL"},{"name":"Test that mediaType should be set to 'text/plain' if NDEFRecordInit.record's recordType is 'text' and NDEFRecordInit.record's mediaType is undefined.","status":"FAIL"},{"name":"Test that mediaType should be set to 'application/octet-stream' if NDEFRecordInit.record's recordType is 'opaque' and NDEFRecordInit.record's mediaType is undefined.","status":"FAIL"},{"name":"Test that mediaType should be set to 'application/json' if NDEFRecordInit.record's recordType is 'json' and NDEFRecordInit.record's mediaType is undefined.","status":"FAIL"},{"name":"Test that mediaType should be set to 'text/plain' if NDEFRecordInit.record's recordType is 'url' and NDEFRecordInit.record's mediaType is undefined.","status":"FAIL"},{"name":"Test that mediaType should be set to 'application/octet-stream' if NDEFRecordInit.record's recordType is external type and NDEFRecordInit.record's mediaType is undefined.","status":"FAIL"}]}