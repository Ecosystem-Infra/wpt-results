{"status":"OK","subtests":[{"name":"Service worker test setup","status":"PASS"},{"name":"Can get the ReadableStreamDefaultReader constructor indirectly","status":"PASS"},{"name":"Can get the ReadableStreamDefaultController constructor indirectly","status":"PASS"},{"name":"ReadableStream.prototype.cancel enforces a brand check","status":"FAIL"},{"name":"ReadableStream.prototype.getReader enforces a brand check","status":"PASS"},{"name":"ReadableStream.prototype.tee enforces a brand check","status":"PASS"},{"name":"ReadableStreamDefaultReader enforces a brand check on its argument","status":"PASS"},{"name":"ReadableStreamDefaultReader.prototype.closed enforces a brand check","status":"FAIL"},{"name":"ReadableStreamDefaultReader.prototype.cancel enforces a brand check","status":"FAIL"},{"name":"ReadableStreamDefaultReader.prototype.read enforces a brand check","status":"FAIL"},{"name":"ReadableStreamDefaultReader.prototype.releaseLock enforces a brand check","status":"PASS"},{"name":"ReadableStreamDefaultController enforces a brand check on its argument","status":"PASS"},{"name":"ReadableStreamDefaultController can't be given a fully-constructed ReadableStream","status":"PASS"},{"name":"ReadableStreamDefaultController.prototype.close enforces a brand check","status":"PASS"},{"name":"ReadableStreamDefaultController.prototype.enqueue enforces a brand check","status":"PASS"},{"name":"ReadableStreamDefaultController.prototype.error enforces a brand check","status":"PASS"}]}