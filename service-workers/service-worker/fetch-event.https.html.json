{"status":"TIMEOUT","subtests":[{"name":"global setup","status":"TIMEOUT"},{"name":"Service Worker headers in the request of a fetch event","status":"NOTRUN"},{"name":"Service Worker responds to fetch event with string","status":"NOTRUN"},{"name":"Service Worker responds to fetch event using request fragment with string","status":"NOTRUN"},{"name":"Service Worker responds to fetch event with blob body","status":"NOTRUN"},{"name":"Service Worker responds to fetch event with the referrer URL","status":"NOTRUN"},{"name":"Service Worker responds to fetch event with an existing client id","status":"NOTRUN"},{"name":"Service Worker does not respond to fetch event","status":"NOTRUN"},{"name":"Service Worker responds to fetch event with null response body","status":"NOTRUN"},{"name":"Service Worker fetches other file in fetch event","status":"NOTRUN"},{"name":"Service Worker responds to fetch event with POST form","status":"NOTRUN"},{"name":"Service Worker falls back to network in fetch event with POST form","status":"NOTRUN"},{"name":"Multiple calls of respondWith must throw InvalidStateErrors","status":"NOTRUN"},{"name":"Service Worker event.respondWith must set the used flag","status":"NOTRUN"},{"name":"Service Worker should expose FetchEvent URL fragments.","status":"NOTRUN"},{"name":"Service Worker responds to fetch event with the correct cache types","status":"NOTRUN"},{"name":"Service Worker should intercept EventSource","status":"NOTRUN"},{"name":"Service Worker responds to fetch event with the correct integrity_metadata","status":"NOTRUN"},{"name":"FetchEvent#body is a string","status":"NOTRUN"},{"name":"FetchEvent#body is a string and is passed to network fallback","status":"NOTRUN"},{"name":"FetchEvent#body is a blob","status":"NOTRUN"},{"name":"FetchEvent#body is a blob and is passed to network fallback","status":"NOTRUN"},{"name":"Service Worker responds to fetch event with the correct keepalive value","status":"NOTRUN"},{"name":"FetchEvent#request.isReloadNavigation is true (location.reload())","status":"NOTRUN"},{"name":"FetchEvent#request.isReloadNavigation is true (history.go(0))","status":"NOTRUN"},{"name":"FetchEvent#request.isReloadNavigation is true (POST + location.reload())","status":"NOTRUN"},{"name":"FetchEvent#request.isReloadNavigation is true (with history traversal)","status":"NOTRUN"},{"name":"FetchEvent#request.isHistoryNavigation is true (with history.go(-1))","status":"NOTRUN"},{"name":"FetchEvent#request.isHistoryNavigation is true (with history.go(1))","status":"NOTRUN"},{"name":"FetchEvent#request.isHistoryNavigation is false (with history.go(0))","status":"NOTRUN"},{"name":"FetchEvent#request.isHistoryNavigation is false (with location.reload)","status":"NOTRUN"},{"name":"FetchEvent#request.isHistoryNavigation is true (with history.go(-2))","status":"NOTRUN"},{"name":"FetchEvent#request.isHistoryNavigation is true (with history.go(2))","status":"NOTRUN"},{"name":"FetchEvent#request.isHistoryNavigation is true (POST + history.go(-1))","status":"NOTRUN"}]}