{"status":"OK","subtests":[{"name":"Unmapped / should resolve ./ specifiers as URLs","status":"FAIL"},{"name":"Unmapped / should resolve ../ specifiers as URLs","status":"FAIL"},{"name":"Unmapped / should resolve / specifiers as URLs","status":"FAIL"},{"name":"Unmapped / should parse absolute fetch-scheme URLs","status":"FAIL"},{"name":"Unmapped / should parse absolute non-fetch-scheme URLs","status":"FAIL"},{"name":"Unmapped / should fail for strings not parseable as absolute URLs and not starting with ./ ../ or /","status":"FAIL"},{"name":"Mapped using the \"imports\" key only (no scopes) / Package-like scenarios / should work for package main modules","status":"FAIL"},{"name":"Mapped using the \"imports\" key only (no scopes) / Package-like scenarios / should work for package submodules","status":"FAIL"},{"name":"Mapped using the \"imports\" key only (no scopes) / Package-like scenarios / should work for package names that end in a slash by just passing through","status":"FAIL"},{"name":"Mapped using the \"imports\" key only (no scopes) / Package-like scenarios / should still fail for package modules that are not declared","status":"FAIL"},{"name":"Mapped using the \"imports\" key only (no scopes) / Tricky specifiers / should work for explicitly-mapped specifiers that happen to have a slash","status":"FAIL"},{"name":"Mapped using the \"imports\" key only (no scopes) / Tricky specifiers / should work when the specifier has punctuation","status":"FAIL"},{"name":"Mapped using the \"imports\" key only (no scopes) / Tricky specifiers / should fail for attempting to get a submodule of something not declared with a trailing slash","status":"FAIL"},{"name":"Mapped using the \"imports\" key only (no scopes) / Tricky specifiers / should fail for attempting to get a module if only a trailing-slash version is present","status":"FAIL"},{"name":"Mapped using the \"imports\" key only (no scopes) / URL-like specifiers / should remap to other URLs","status":"FAIL"},{"name":"Mapped using the \"imports\" key only (no scopes) / URL-like specifiers / should remap URLs that are just composed from / and .","status":"FAIL"},{"name":"Mapped using the \"imports\" key only (no scopes) / URL-like specifiers / should remap URLs that are prefix-matched by keys with trailing slashes","status":"FAIL"},{"name":"Mapped using the \"imports\" key only (no scopes) / URL-like specifiers / should use the last entry's address when URL-like specifiers parse to the same absolute URL","status":"FAIL"},{"name":"Mapped using the \"imports\" key only (no scopes) / Overlapping entries with trailing slashes / should favor the most-specific key","status":"FAIL"},{"name":"Mapped using the \"imports\" key only (no scopes) / Overlapping entries with trailing slashes / should favor the most-specific key when there are no mappings for less-specific keys","status":"FAIL"},{"name":"Mapped using the \"imports\" key only (no scopes) / should deal with data: URL bases","status":"FAIL"}]}